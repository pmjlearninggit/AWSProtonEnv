AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a public or private subnet, and accessible via a public load balancer.
Mappings:
  TaskSize:
    x-small:
      cpu: 256
      memory: 512
    small:
      cpu: 512
      memory: 1024
    medium:
      cpu: 1024
      memory: 2048
    large:
      cpu: 2048
      memory: 4096
    x-large:
      cpu: 4096
      memory: 8192

Resources:
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: 'false'
      Scheme: internet-facing
      {% if service_instance.inputs.loadbalancer_type == 'application' %}
      SecurityGroups:
        - !GetAtt
          - LoadBalancerSecurityGroup
          - GroupId
      {% endif %}
      Subnets:
        - '{{ environment.outputs.PublicSubnet1 }}'
        - '{{ environment.outputs.PublicSubnet2 }}'
      {% if service_instance.inputs.loadbalancer_type == 'application' %}
      Type: application
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Automatically created Security Group for Application LB.
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: '{{ environment.outputs.VPC }}'
  LoadBalancerSecurityGrouptoServiceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !GetAtt
        - LoadBalancerSecurityGroup
        - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId: !GetAtt
        - ServiceSecurityGroup
        - GroupId
      FromPort: 80
      ToPort: 80
      {% else %}
      Type: network
      {% endif %}
  LoadBalancerPublicListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref LoadBalancerPublicListenerECSGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      {% if service_instance.inputs.loadbalancer_type == 'application' %}
      Protocol: HTTP
      {% else %}
      Protocol: TCP
      {% endif %}
  LoadBalancerPublicListenerECSGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Port: '{{ service_instance.inputs.port }}'
      {% if service_instance.inputs.loadbalancer_type == 'application' %}
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'false'
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      {% else %}
      Protocol: TCP
      {% endif %}
      TargetType: ip
      VpcId: '{{ environment.outputs.VPC }}'
      HealthCheckIntervalSeconds: 6
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
  ServiceTaskDefTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: 'Publish2SNS'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'sns:Publish'
                Resource: '{{ environment.outputs.SNSTopicArn }}'
      ManagedPolicyArns:
        - !Ref BaseTaskRoleManagedPolicy
        - !Ref AwsOtelManagedPolicy
        {{ service_instance.components.default.outputs
            | proton_cfn_iam_policy_arns }}

  # Basic permissions for writing metrics and log events to Cloudwatch and X-Ray, this is something that would typically
  # be required by every production-ready service.
  BaseTaskRoleManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "cloudwatch:PutMetricData"
              - "logs:PutLogEvents"
            Resource: "*"
          - Effect: Allow
            Action:
              - 's3:ListAllMyBuckets'
            Resource: "*"

  AwsOtelManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'xray:GetSamplingRules'
              - 'xray:GetSamplingTargets'
              - 'xray:UpdateGroup'
              - 'xray:CreateGroup'
              - 'xray:CreateSamplingRule'
              - 'xray:GetSamplingStatisticSummaries'
              - 'xray:PutTelemetryRecords'
              - 'xray:PutTraceSegments'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'logs:PutLogEvents'
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:DescribeLogStreams'
              - 'logs:DescribeLogGroups'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'ssm:GetParameters'
            Resource: '*'
          - Sid: 'PrometheusRemoteWrite'
            Effect: Allow
            Action:
              - 'aps:RemoteWrite'
            Resource: '*'

  ServiceTaskDef:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: '{{ service_instance.inputs.image }}'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ServiceTaskDefLogGroup
              awslogs-stream-prefix: '{{ service.name }}/{{ service_instance.name }}'
              awslogs-region: !Ref 'AWS::Region'
          Name: '{{ service_instance.name }}'
          PortMappings:
            - ContainerPort: '{{ service_instance.inputs.port }}'
              Protocol: tcp
          Environment:
            - Name: SNS_TOPIC_ARN
              Value: '{"ping":"{{ environment.outputs.SNSTopicArn }}"}'
            - Name: SNS_REGION
              Value: "{{ environment.outputs.SNSRegion }}"
            - Name: BACKEND_URL
              Value: "{{ service_instance.inputs.backendurl }}"
            {% if service_instance.components.default.outputs | length > 0 %}
            {{ service_instance.components.default.outputs |
                proton_cfn_ecs_task_definition_formatted_env_vars }}
            {% endif %}
          HealthCheck:
            Command: ["CMD-SHELL", "curl -f http://localhost/ || exit 1" ]
            Interval: 10
            Retries: 4
            StartPeriod: 60
            Timeout: 5
        - Essential: true
          Image: '{{ service_instance.inputs.otel_image }}'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ServiceTaskDefLogGroup
              awslogs-stream-prefix: '{{ service.name }}/{{ service_instance.name }}-otel-sidecar-collector'
              awslogs-region: !Ref 'AWS::Region'
          Name: '{{ service_instance.name }}-otel-collector'
          Command: ["--config=/etc/ecs/ecs-amp-xray.yaml"]
          Secrets:
            - Name: AOT_CONFIG_CONTENT
              ValueFrom: '{{ environment.outputs.OtelCollectorConfigSsmParameterName }}'
          Environment:
           - Name: OTEL_METRICS_EXPORTER
             Value: prometheus
           - Name: AWS_PROMETHEUS_ENDPOINT
             Value: '{{ environment.outputs.PrometheusWorkSpaceRemoteWriteEndpoint }}'
            {% if service_instance.components.default.outputs | length > 0 %}
            {{ service_instance.components.default.outputs |
                proton_cfn_ecs_task_definition_formatted_env_vars }}
            {% endif %}
      Cpu: !FindInMap [TaskSize, {{ service_instance.inputs.task_size }}, cpu]
      ExecutionRoleArn: '{{ environment.outputs.ServiceTaskDefExecutionRoleArn }}'
      Family: '{{ service.name }}_{{ service_instance.name }}'
      Memory: !FindInMap [TaskSize, {{ service_instance.inputs.task_size }}, memory]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt
        - ServiceTaskDefTaskRole
        - Arn
  ServiceTaskDefLogGroup:
    Type: 'AWS::Logs::LogGroup'
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  Service:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: '{{ service.name }}_{{ service_instance.name }}'
      Cluster: '{{ environment.outputs.Cluster }}'
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: '{{ service_instance.inputs.desired_count }}'
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: '{{ service_instance.name }}'
          ContainerPort: '{{ service_instance.inputs.port }}'
          TargetGroupArn: !Ref LoadBalancerPublicListenerECSGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
        {% if service_instance.inputs.subnet_type == 'private' %}
          AssignPublicIp: DISABLED
        {% else %}
          AssignPublicIp: ENABLED
        {% endif %}
          SecurityGroups:
            - !GetAtt
              - ServiceSecurityGroup
              - GroupId
          Subnets:
          {% if service_instance.inputs.subnet_type == 'private' %}
            - '{{ environment.outputs.PrivateSubnet1 }}'
            - '{{ environment.outputs.PrivateSubnet2 }}'
          {% else %}
            - '{{ environment.outputs.PublicSubnet1 }}'
            - '{{ environment.outputs.PublicSubnet2 }}'
          {% endif %}
      ServiceRegistries:
        - RegistryArn: !GetAtt
            - CloudMapService
            - Arn
      TaskDefinition: !Ref ServiceTaskDef
    DependsOn:
      - LoadBalancerPublicListenerECSGroup
      - LoadBalancerPublicListener
  CloudMapService:
    Type: 'AWS::ServiceDiscovery::Service'
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        NamespaceId: '{{ environment.outputs.CloudMapNamespaceId }}'
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: '{{ service_instance.name }}.{{ service.name }}'
      NamespaceId: '{{ environment.outputs.CloudMapNamespaceId }}'
  ServiceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Automatically created Security Group for the Service
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: '-1'
      VpcId: '{{ environment.outputs.VPC }}'
  ServiceSecurityGroupfromLoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      GroupId: !GetAtt
        - ServiceSecurityGroup
        - GroupId
      FromPort: 80
      ToPort: 80
      {% if service_instance.inputs.loadbalancer_type == 'application' %}
      SourceSecurityGroupId: !GetAtt
        - LoadBalancerSecurityGroup
        - GroupId
      {% else %}
      CidrIp: 0.0.0.0/0 #Network Load Balancers do not have associated security groups. See - https://docs.aws.amazon.com/elasticloadbalancing/latest/network/target-group-register-targets.html#target-security-groups
      {% endif %}
  TaskCountTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    DependsOn: Service
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId: !Join
        - ''
        - - service/
          - '{{ environment.outputs.Cluster }}'
          - /
          - '{{ service.name }}_{{ service_instance.name }}'
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs
  TaskCountTargetCpuScaling:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: LBFargateServiceTaskCountTargetCpuScaling
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref TaskCountTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 50
  TaskCountTargetMemoryScaling:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: LBFargateServiceTaskCountTargetMemoryScaling
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref TaskCountTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization
        TargetValue: 50
Outputs:
  ServiceURL:
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - LoadBalancer
          - DNSName
